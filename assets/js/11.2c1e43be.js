(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{397:function(_,v,t){_.exports=t.p+"assets/img/v2-8c1cfe007a2b5b64d221a20a335a9333_r.8c1cfe00.jpg"},398:function(_,v,t){_.exports=t.p+"assets/img/image-20210419223540956.9e73d80d.png"},399:function(_,v,t){_.exports=t.p+"assets/img/image-20210419223828117.69252f77.png"},469:function(_,v,t){"use strict";t.r(v);var p=t(11),r=Object(p.a)({},(function(){var _=this,v=_.$createElement,p=_._self._c||v;return p("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[p("h1",{attrs:{id:"一文搞懂负载均衡"}},[_._v("一文搞懂负载均衡")]),_._v(" "),p("p",[_._v("在互联网发展呢的今天，我们一般会把多台机器组成一个集群对外提供服务。然而，我们的网站对外提供的访问入口都是一个的，比如 www.baidu.com 那么当用户在浏览器输入 www.baidu.com 的时候如何将用户的请求分发到集群中不同的机器上呢，这就是负载均衡在做的事情。")]),_._v(" "),p("p",[p("img",{attrs:{src:t(397),alt:"image-20210419223540956"}})]),_._v(" "),p("h3",{attrs:{id:"负载均衡的分类"}},[_._v("负载均衡的分类")]),_._v(" "),p("p",[_._v("负载均衡就是一种计算机网络技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁碟驱动器或其他资源中分配负载，以达到最佳化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。那么，这种计算机技术的实现方式有多种。大致可以分为以下几种，其中最常用的是四层和七层负载均衡：")]),_._v(" "),p("p",[p("img",{attrs:{src:t(398),alt:"image-20210419223540956"}})]),_._v(" "),p("ul",[p("li",[p("p",[_._v("四层负载均衡")]),_._v(" "),p("p",[_._v("四层负载均衡工作在OSI模型的传输层，由于在传输层，只有TCP/UDP协议，这两种协议中除了包含源IP、目标IP以外，还包含源端口号及目的端口号。四层负载均衡服务器在接受到客户端请求后，以后通过修改数据包的地址信息（IP+端口号）将流量转发到应用服务器。")])]),_._v(" "),p("li",[p("p",[_._v("七层负载均衡")]),_._v(" "),p("p",[_._v("七层负载均衡工作在OSI模型的应用层，应用层协议较多，常用http、radius、dns等。七层负载就可以基于这些协议来负载。这些应用层协议中会包含很多有意义的内容。比如同一个Web服务器的负载均衡，除了根据IP加端口进行负载外，还可根据七层的URL、浏览器类别、语言来决定是否要进行负载均衡。")])])]),_._v(" "),p("h3",{attrs:{id:"常见负载均衡算法"}},[_._v("常见负载均衡算法")]),_._v(" "),p("h4",{attrs:{id:"轮询-round-robin"}},[_._v("轮询(Round Robin)")]),_._v(" "),p("p",[_._v("请求到达后，将客户端发送到负载均衡器的请求依次轮流地转发给服务集群的某个节点。")]),_._v(" "),p("p",[_._v("优点：实现简单，每个集群节点平均分担所有的请求。")]),_._v(" "),p("p",[_._v("缺点：当集群中服务器硬件配置不同、性能差别大时，无法区别对待。引出下面的算法。")]),_._v(" "),p("h4",{attrs:{id:"随机-random"}},[_._v("随机(Random)")]),_._v(" "),p("p",[_._v("随机选取集群中的某个节点来处理该请求，由概率论的知识可知，随着请求量的变大，随机算法会逐渐演变为轮询算法，即集群各个节点会处理差不多数量的请求。")]),_._v(" "),p("p",[_._v("优点：简单使用，不需要额外的配置和算法。")]),_._v(" "),p("p",[_._v("缺点：随机数的特点是在数据量大到一定量时才能保证均衡，所以如果请求量有限的话，可能会达不到均衡负载的要求。")]),_._v(" "),p("h4",{attrs:{id:"加权"}},[_._v("加权")]),_._v(" "),p("p",[_._v("加权算法主要是根据集群的节点对应机器的性能的差异，给每个节点设置一个权重值，其中性能好的机器节点设置一个较大的权重值，而性能差的机器节点则设置一个较小的权重值。权重大的节点能够被更多的选中。")]),_._v(" "),p("p",[_._v("优点：可以根据机器的具体情况，分配不同的负载，达到能者多劳。")]),_._v(" "),p("p",[_._v("缺点：需要额外管理加权系数。")]),_._v(" "),p("h4",{attrs:{id:"最小连接数"}},[_._v("最小连接数")]),_._v(" "),p("p",[_._v("主要是根据集群的每个节点的当前连接数来决定将请求转发给哪个节点，即每次都将请求转发给当前存在最少并发连接的节点。")]),_._v(" "),p("p",[_._v("优点：可以根据集群节点的负载情况来进行请求的动态分发，即机器性能好，处理请求快，积压请求少的节点分配更多的请求。避免某个节点因为处理超过自身所能承受的请求量而导致宕机或者响应过慢。")]),_._v(" "),p("h4",{attrs:{id:"hash"}},[_._v("hash")]),_._v(" "),p("p",[_._v("将对请求的IP地址或者URL计算一个哈希值，然后与集群节点的数量进行取模来决定将请求分发给哪个集群节点。")]),_._v(" "),p("p",[_._v("优点：实现简单")]),_._v(" "),p("p",[_._v("缺点：如果某个节点挂了，会使得一部分流量不可用。")]),_._v(" "),p("h3",{attrs:{id:"负载均衡分类"}},[_._v("负载均衡分类")]),_._v(" "),p("h4",{attrs:{id:"_1-硬件负载均衡"}},[_._v("1. 硬件负载均衡")]),_._v(" "),p("p",[_._v("常见的硬件有比较昂贵的F5和Array等商用的负载均衡器，它的优点"),p("strong",[_._v("简单")]),_._v("，有专业的人负责；缺点就是 "),p("strong",[_._v("贵")]),_._v(" ，所以对于规模较小的网络服务来说暂时还没有需要使用。")]),_._v(" "),p("h4",{attrs:{id:"_2-软件负载均衡"}},[_._v("2. 软件负载均衡")]),_._v(" "),p("p",[_._v("目前使用最广泛的三种负载均衡软件Nginx/LVS/HAProxy，他们都是基于Linux的开源免费的负载均衡软件，这些都是通过软件级别来实现，所以费用非常低廉。")]),_._v(" "),p("h4",{attrs:{id:"_3-成熟的架构"}},[_._v("3. 成熟的架构")]),_._v(" "),p("p",[_._v("成熟的架构有LVS+Keepalived、Nginx+Keepalived、HAProxy+keepalived。")]),_._v(" "),p("h3",{attrs:{id:"常见负载均衡软件"}},[_._v("常见负载均衡软件")]),_._v(" "),p("h4",{attrs:{id:"nginx"}},[_._v("Nginx")]),_._v(" "),p("p",[p("img",{attrs:{src:t(399),alt:"image-20210419223828117"}})]),_._v(" "),p("p",[_._v("Nginx的负载均衡支持：")]),_._v(" "),p("blockquote",[p("p",[_._v("rr：轮叫，轮流分配到后端服务器；")]),_._v(" "),p("p",[_._v("wrr：权重轮叫，根据后端服务器负载情况来分配；")]),_._v(" "),p("p",[_._v("lc：最小连接，分配已建立连接最少的服务器上；")]),_._v(" "),p("p",[_._v("wlc：权重最小连接，根据后端服务器处理能力来分配。")])]),_._v(" "),p("p",[_._v("Nginx优点：")]),_._v(" "),p("blockquote",[p("p",[_._v("1.简单：安装和配置比较简单、测试也简单")]),_._v(" "),p("p",[_._v("2.稳定：单机一般能支撑几万次的并发量")]),_._v(" "),p("p",[_._v("3.轻量：能ping通就就能进行负载功能")]),_._v(" "),p("p",[_._v("4.易用：明确的错误码、超时提醒")]),_._v(" "),p("p",[_._v("5.强大：负载均衡、反向代理、WEB容器等功能")])]),_._v(" "),p("p",[_._v("Nginx缺点：")]),_._v(" "),p("blockquote",[p("p",[_._v("1.仅能支持http、https和Email协议")]),_._v(" "),p("p",[_._v("2.对后端服务器的健康检查， 只支持通过端口来检测，不支持通过url来检测")])]),_._v(" "),p("h4",{attrs:{id:"lvs"}},[_._v("LVS")]),_._v(" "),p("p",[_._v("LVS的负载均衡支持：")]),_._v(" "),p("blockquote",[p("p",[_._v("roundrobin：轮询，轮流分配到后端服务器；")]),_._v(" "),p("p",[_._v("static-rr：根据后端服务器性能分配；")]),_._v(" "),p("p",[_._v("leastconn：最小连接者优先处理；")]),_._v(" "),p("p",[_._v("source：根据请求源IP，与Nginx的IP_Hash类似。")])]),_._v(" "),p("p",[_._v("LVS优点：")]),_._v(" "),p("blockquote",[p("p",[_._v("1.高效：工作在网络4层之上 仅作分发之用，没有流量的产生，这个特点也决定了它在负载均衡软件里的性能最强的 ，对内存和cpu资源消耗比较低")]),_._v(" "),p("p",[_._v("2.易用：配置性比较低，简化操作成本")]),_._v(" "),p("p",[_._v("3.稳定：本身抗负载能力很强，自身有完整的双机热备方案")]),_._v(" "),p("p",[_._v("4.应用范围广：因为LVS工作在4层，所以它几乎可以对所有应用做负载均衡，包括http、tcp、数据库、在线聊天室等")])]),_._v(" "),p("p",[_._v("LVS缺点：")]),_._v(" "),p("blockquote",[p("p",[_._v("1.不能做动静分离")]),_._v(" "),p("p",[_._v("2.大型网站LVS+Keepalived实施起来就比较复杂，配置成本高")])]),_._v(" "),p("h4",{attrs:{id:"haproxy"}},[_._v("HAProxy")]),_._v(" "),p("p",[_._v("HAProxy负载均衡策略非常多，包括：")]),_._v(" "),p("blockquote",[p("p",[_._v("roundrobin，表示简单的轮询，这个不多说，这个是负载均衡基本都具备的；\nstatic-rr，表示根据权重，建议关注；")]),_._v(" "),p("p",[_._v("leastconn，表示最少连接者先处理，建议关注；")]),_._v(" "),p("p",[_._v("source，表示根据请求源IP，这个跟Nginx的IP_hash机制类似，我们用其作为解决session问题的一种方法，建议关注；")]),_._v(" "),p("p",[_._v("ri，表示根据请求的URI；")]),_._v(" "),p("p",[_._v("rl_param，表示根据请求的URl参数’balance url_param’ requires an URL parameter name；")]),_._v(" "),p("p",[_._v("hdr(name)，表示根据HTTP请求头来锁定每一次HTTP请求；")]),_._v(" "),p("p",[_._v("rdp-cookie(name)，表示根据据cookie(name)来锁定并哈希每一次TCP请求。")])]),_._v(" "),p("p",[_._v("HAProxy的优点能够补充Nginx的一些缺点， 比如支持Session的保持，Cookie的引导；同时支持通过获取指定的url来检测后端服务器的状态。")]),_._v(" "),p("p",[_._v("HAProxy跟LVS类似，本身就只是一款负载均衡软件；单纯从效率上来讲HAProxy会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的。")]),_._v(" "),p("p",[_._v("支持TCP协议的负载均衡转发，可以对MySQL读进行负载均衡，对后端的MySQL节点进行检测和负载均衡。")]),_._v(" "),p("h3",{attrs:{id:"常见微服务框架的负载均衡"}},[_._v("常见微服务框架的负载均衡")]),_._v(" "),p("h4",{attrs:{id:"dubbo"}},[_._v("Dubbo")]),_._v(" "),p("p",[_._v("支持4种算法（随机、轮询、活跃度、Hash一致性），而且算法里面引入权重的概念。")]),_._v(" "),p("h4",{attrs:{id:"springcloud-feign"}},[_._v("SpringCloud Feign")]),_._v(" "),p("p",[_._v("支持很多中算法，包括：轮询、随机、最小连接、区域加权、重试以及ResponseTime加权。也可以自己实现负载均衡算法")])])}),[],!1,null,null,null);v.default=r.exports}}]);