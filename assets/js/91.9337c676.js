(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{535:function(n,v,_){"use strict";_.r(v);var t=_(11),p=Object(t.a)({},(function(){var n=this,v=n.$createElement,_=n._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[_("h1",{attrs:{id:"工作十年-每年都会遇到的复盘"}},[n._v("工作十年-每年都会遇到的复盘")]),n._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[n._v("此情此景，似曾相识！")]),n._v(" "),_("p",[n._v("年年岁岁花相似，岁岁年年人不同！")]),n._v(" "),_("p",[n._v("人类从历史中吸取的唯一教训就是人类从不吸取教训。")]),n._v(" "),_("div",{staticClass:"custom-block right"})]),n._v(" "),_("p",[n._v("前几天公司组织月度COE(Correction Of Error)复盘，其中找了几个典型做相关总结。整体下来给人的感觉所有的故障都是是什么大的问题，\n都是一些小问题，积沙成山，最后演变成了一场故障。而事故发生后进行复盘，可以看到有很多种规避措施都能避免问题，但最终我们还是在线上发生了故障。")]),n._v(" "),_("p",[n._v("故障可以分为三大类：")]),n._v(" "),_("p",[n._v("第一类是和代码有关，而和代码有关的也不是什么大问题，也是一些常见的小问题比如：NPE(Null Pointer Exception),还有就是类型转换问题以及边界值问题。\n其中1个是代码合并问题，合并的时候代码冲突，导致有一个代码合并错了，是不是感觉问题很低级？\n还有一类是配置问题，配置没做校验导致配置的参数不正确，配置上线后发现系统出现了大量异常；\n最后一类是和环境有关，生产和测试的环境没有隔离，操作线下的环境的时候，影响到了线上。")]),n._v(" "),_("p",[n._v("作为一个工作十年的老码农来说，这些问题可以说都很常见，我们不得不思考，为什么这么常见的问题还总是发生呢？")]),n._v(" "),_("p",[n._v("在心理学上有个墨菲定理（Murphy's Law），其本质意思就是：一件事可能出错时就一定会出错。用英文写是 “if it can go wrong, it will.”\n有的人可能会感觉诧异，怎么可能呢，不是有概率的吗，如果概率极低的话可能就不出现？之所以还没有出错或未发生，是因为做的次数还不够多，也就是说基数不够大。")]),n._v(" "),_("p",[n._v("针对以上三类问题，我们可以稍微总结一下：")]),n._v(" "),_("p",[n._v("1、专业问题\n关于专业可以分为两类，一类是认知之外的(无知之错)，在计算机的世界里，没有人没有知识盲区，所以存在盲点是正常的；另一类是认知之内(无能之错)，\n源于自己的粗心大意，源于自己的不专业的素质。\n认知之外的就是我们所说的专业深度问题，比如千年虫问题、浮点数精度问题、网络层面的丢包等底层问题；\n认知之内的就是我们所说的专业基础方面，比如NPE问题、边界问题、默认值问题等等。")]),n._v(" "),_("p",[n._v("2、规范问题\n2017年出了一本书叫《清单革命》。这本书的问世，掀起了一场观念变革风暴，其中的内容除了涉及医学领域，还囊括航空，建筑、金融，餐饮，行政等行业，\n当然也包括我们软件行业，这本书详细讲述了清单运用的具体案例，旨在告诉我们，在复杂多变的世界里，如何正确安全的做好一件事。")]),n._v(" "),_("p",[n._v("书中有一句话：我们并不无知，但无论我们进行多么细致的专业分工，无论接受数量多么巨大的培训，一些关键步骤还是被忽略，一些错误还是无法避免。")]),n._v(" "),_("p",[n._v("所以我们需要清单，也需要规范，来为我们的关键行为保驾护航！")]),n._v(" "),_("p",[n._v("关于规范产生的问题也可以分为两类：\n规范缺失：规范缺失的问题感觉还好解决一些，添加上规范就行了。其实也没有那么简单，因为人的思维是有惰性的，规范太多等于没有规范。所以还要考虑规范的关键性！\n规范落地：有了规范是一回事，规范有没有实施又是另一回事。如果规范没有执行的就需要考虑规范的必要性，如果有必要还要考虑实施的可行性。")]),n._v(" "),_("p",[n._v("3、资源问题"),_("br"),n._v("\n经济学家罗莫认为，人类的物质性存在会受到观念而不是要素的制约。一句话：不是资源不够，而是认知不足！\n过去人们会认为石油会污染水井，后来它变成了一种燃料，取代了供应不断减少的鲸油。过去人类用沙子制作玻璃，现在用它来制作芯片和光纤。")]),n._v(" "),_("p",[n._v("我们的现实生活中资源永远匮乏，没有任何一个团队不缺人，也没有任何人不缺时间。如果我们总是将问题归咎于资源稀缺，会让我们寸步难行。"),_("br"),n._v("\n从另一方面，匮乏也一种好事。就像饥渴的人会对食物特别敏感，从而让自己生存下去；受制于时间的人会专注于手上的事，这也就是我们常说的DeadLine是第一生产力。")]),n._v(" "),_("p",[n._v("同样一件事，有的人需要干10天，有的人只需要3天；\n同样一件事，有的团队需要10个人，有的团队只需要3个人。\n在工程师的世界里以一敌十不足为奇，这也就是为什么有的年薪百万，有的月薪3K。")]),n._v(" "),_("p",[n._v("资源问题一般分为两类：\n人力资源：缺少前端人员、缺少测试人员、缺少产品经理等等都是比较常见的现象；\n物质资源：没有机器、没有算力、没有测试环境等等。")]),n._v(" "),_("p",[n._v("同时，没有资源往往也是一个比较好的借口。一件事没有做或没做成，都可以归咎为资源的原因，而资源的原因归根到底也是专业的问题。")]),n._v(" "),_("p",[n._v("我们没有测试，可能归结为资源问题；\n我们没有人员，可能归结为资源问题；\n我们没有隔离，可能归结为资源问题。")]),n._v(" "),_("p",[n._v("如何解决这些问题？")]),n._v(" "),_("p",[n._v('1、提升专业素质\n作为程序员总是会想法设法的提高程序的效率，同时我们也应该想法设法的提高自己的效率。\n实践、实践、实践。说白了就是多做！\n“人们眼中的天才之所以卓越非凡，并非天资超人一等，而是付出了持续不断的努力。1万小时的锤炼是任何人从平凡变成世界级大师的必要条件。”\n《异类》一书中详细的分析出那些所谓的"天才"，都是建立在无数的训练基础之上的。')]),n._v(" "),_("p",[n._v("学习工程师专业技能\n计算机的世界有一点是反人类的，我们一般的学习是从基础到高级，从简单到复杂；但计算机的世界越基础越抽象、越复杂，越晦涩难懂。\n计算机科学是对底层晦涩的内容一层层的封装，一层层的隔离，到最上层一个不认识字的孩子也可以操作计算机。\n对于一位软件工程师，只了解上层的使用是远远不够的，还要了解底层的实现原理，了解底层的实现原理也是不够，还要了解运行原理。\n所以要学习：\n计算机系统\n计算机网络\n数据结构和算法\n培养工程师职业素养：\n0信任\n抽象\n设计模式")]),n._v(" "),_("p",[n._v("2、制定流程规范\n规范不是法律，规范是指导！规范的目标不是惩罚而是规避问题，如果有更好的问题可以规避问题就可以不要规范。\n我相信关于生产上线每个公司都有每个公司的SOP(Standard Operating Procedure)，所谓的SOP其实就是一个操作清单。有了这个清单，严格按照这个清单操作，\n在一定程度上可以规避常见的问题。其中一般的SOP包括：\n检测阶段：\n是否自测？\n是否测试通过？\n是否有配置变更？\n是否有数据变更？\n是否影响其他业务？\n是否能回滚？\n上线阶段：\n周知上下游系统\n灰度验证\n全量上线\n验证阶段：\n观察节点状态：有没有注册到注册中心\n观察日志：日志是否正常输出\n观察监控：节点指标是否正常")]),n._v(" "),_("p",[n._v("3、提升资源使用\n提升时间利用资源：在计算机世界里毫秒必争，在现实的世界里我们似乎对时间置若罔闻，对小时、分钟的浪费完全无动于衷。\n设置deadline\n番茄工作法\n提升开发效率：\n快捷键\n工具化\n抽象化\n增加并行度：不要低于2个，不要高于3个。低于2个大脑利用率较低，高于3个上下文切换成本太高。\n一心二意：在实际工作中我们一般会思考、开发、调试这样的周期来推进。然而在调试的时候，往往是有一些时间空闲的，\n这时候可以用这些空闲时间去做一些无关紧要的事情；")]),n._v(" "),_("p",[n._v("马克吐温说：“世界上最容易的事情就是戒烟，我已经戒了几百次了”。这些说起来很容易，但是真正做起来真的没那么容易，因为我们的大脑天生就具有惰性。\n我们能做的就是每时每刻警告自己，是否尽自己所能做到了更好？")])])}),[],!1,null,null,null);v.default=p.exports}}]);