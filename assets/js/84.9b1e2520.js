(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{527:function(i,v,_){"use strict";_.r(v);var t=_(11),p=Object(t.a)({},(function(){var i=this,v=i.$createElement,_=i._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[_("h1",{attrs:{id:"工作十年-我重新捡起了软件七大原则"}},[i._v("工作十年-我重新捡起了软件七大原则")]),i._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[i._v("理想很丰满，现实很骨感")]),i._v(" "),_("p",[i._v("年轻时我很穷，经过多年的努力，我终于不再年轻！")]),i._v(" "),_("div",{staticClass:"custom-block right"},[_("h2",{attrs:{id:"什么是原则？"}},[i._v("什么是原则？")]),i._v(" "),_("p",[i._v("原则是指经过长期经验总结所得出的合理化的现象。 ——百度百科")]),i._v(" "),_("p",[i._v("原则具有指导性、适用性、异样性。")]),i._v(" "),_("p",[i._v("指导性是指：在犹豫要不要做某件事情的时候，可以根据自身的原则出发作出抉择，所以 瑞·达利欧 根据自己的行为标出了一本书《原则》。")]),i._v(" "),_("p",[i._v("适用性是指：人在社会群体中分工合作实现自我生存和推动社会发展，在这个漫长的过程中，逐渐形成了一些人们对于言行的共识，例如欠债还钱，杀人偿命等。")]),i._v(" "),_("p",[i._v("异样性是指：每个人对某件事或某个观点、态度的原则不同，比如股民会根据自己对股票的理解、市场的观察以及自身的认知，产生不同的操作原则。")]),i._v(" "),_("h2",{attrs:{id:"为什么要学软件设计原则？"}},[i._v("为什么要学软件设计原则？")]),i._v(" "),_("p",[i._v("学习设计原则，就像学习交通规则一样。如果编码比喻为开车，那设计原则就相当于交通规则。要想让自己的软件在市场上生存，就需要让自己的车在道路上遵守交通规则。")]),i._v(" "),_("p",[i._v("通过交通原则的学习，才能灵活地完成刹车、停车、转向灯、变道等各种各样复杂的社会场景；\n同样，通过软件设计原则的学习，才能灵活地设计出抽象、聚合、耦合、健壮的代码来满足各种各样的业务场景。")]),i._v(" "),_("h2",{attrs:{id:"软件设计原则有哪些？"}},[i._v("软件设计原则有哪些？")]),i._v(" "),_("h3",{attrs:{id:"面向对象设计5个基本原则"}},[i._v("面向对象设计5个基本原则")]),i._v(" "),_("p",[i._v("面向对象程序设计（英语：Object-oriented programming，缩写：OOP）是种具有对象概念的编程典范，同时也是一种程序开发的抽象方针。是种具有对象概念的编程典范，同时也是一种程序开发的抽象方针。对象则指的是类（class）的实例。\n而类有两个主要的概念：")]),i._v(" "),_("p",[i._v("类（Class）：定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。\n对象（Object）：是类的实例（Instance）。")]),i._v(" "),_("p",[i._v("封装性（Encapsulation）的面向对象程序设计隐藏了某一方法的具体执行步骤，取而代之的是通过消息传递机制发送消息给它。\n继承性（Inheritance）是指，在某种情况下，一个类会有“子类”。子类比原本的类（称为父类）要更加具体化。\n多态（Polymorphism）是指由继承而产生的相关的不同的类，其对象对同一消息会做出不同的响应。")]),i._v(" "),_("p",[i._v("以上三个特性，都是在抽象的基础之上实现的。")]),i._v(" "),_("p",[i._v("2009年的时候，一个叫罗伯特·C·马丁的哥们在一次大会上提出了SOLID的概念，即：单一职责原则（Single responsibility principle,SRP）、开闭原则 (The Open/Closed Principle, OCP) 、里氏替换原则（Liskov Substitution principle）、\n接口隔离原则（Interface-segregation principles，ISP）、依赖反转原则（Dependency inversion principle，DIP）。注意只是这哥们提出的SOLID的概念，而不是这哥们创造的这5个原则。这些原则在之前已经存在。就像乔布斯只是做出了IPhone，\n而不是乔布斯创造了智能手机。这里多提一下罗伯特·C·马丁，这哥们是一位世界级软件开发大师、设计模式和敏捷开发先驱。他在2010年出版了《代码整洁之道》一书，这本书一经面世，就在软件开发行业掀起了轩然大波 。小编最近还重刷了一遍，12年前的规范，\n在计算机世界依然适用，是多么的难能可贵。")]),i._v(" "),_("p",[i._v("再看一下这哥们出版的图书，在豆瓣上的评分：")]),i._v(" "),_("h4",{attrs:{id:"单一职责原则（single-responsibility-principle-srp）"}},[i._v("单一职责原则（Single responsibility principle,SRP）")]),i._v(" "),_("p",[i._v("这个原则是由马丁先生在他的《敏捷软件开发，原则，模式和实践》一书中给出的。不过也是建立在巨人的肩膀之上产生的，说白了就是我们软件工程师常说的：高内聚！")]),i._v(" "),_("p",[i._v('这里最抽象的是什么是职责？马丁先生的定义是"改变的原因"。')]),i._v(" "),_("p",[i._v("举个例子，可以想象一下我们现实生活中制作一个报表。我们改变它有两个原因：")]),i._v(" "),_("p",[i._v("1、报表内容的可以编辑，比如修改、格式化等功能")]),i._v(" "),_("p",[i._v("2、报表格式可以改变，比如转为PDF、打印等功能")]),i._v(" "),_("p",[i._v("单一功能原则认为这两方面的问题事实上是两个分离的功能。这样我们在设计的时候，应该设计到两个不同的类或模块里。从而做到每个类或模块只有一个功能。")]),i._v(" "),_("p",[i._v("这样做有什么好处呢？")]),i._v(" "),_("p",[i._v("想象一下，如果不分开的话。我们修改了报表的内容，我们会担心打印功能可能会不好使吗？同样我们打印了报表，会担心报表的内容不正确吗？\n显然不会，那就是因为我们的编辑部影响打印，我们的打印也不影响编辑。")]),i._v(" "),_("h4",{attrs:{id:"开闭原则-the-open-closed-principle-ocp"}},[i._v("开闭原则 (The Open/Closed Principle, OCP)")]),i._v(" "),_("p",[i._v("这个原则是伯特兰·迈耶在他1988年发行的《面向对象软件构造》中给出。马丁先生1996年发表的文章《开闭原则》是使用这种方法的启发式著作。\n这个原则的核心是：一旦完成了，除了错误的情况下再修改，否则都通过拓展的方式完成新的功能。\n简单的说就是：对拓展开放，对修改关闭。")]),i._v(" "),_("p",[i._v("举个例子，我们要发送通知。比如现在有了邮件通知，现在要添加电话通知。我们如果在原有的通知上修改的话，我们就可能会影响到之前的邮件通知，这样就带来了风险。\n所以我们不在原来的通知上修改，而是拓展新的通知方式，有需要的可以调用新的通知方式。这样就规避了原有业务的风险。")]),i._v(" "),_("p",[i._v("但是我们如何能够对接上新的通知呢？这就要求很高的抽象能力。比如邮件通知需要邮箱号码，电话通知需要电话号码，甚至通知的形式和内容也不一样。\n如果上层做了很好的抽象，通知的发送逻辑各自实现，可以做到很优雅自如的表现。就像我们无论是坐火车、还是坐飞机，我们只需要人过去就可以乘坐一样。")]),i._v(" "),_("h4",{attrs:{id:"里氏替换原则（liskov-substitution-principle）"}},[i._v("里氏替换原则（Liskov Substitution principle）")]),i._v(" "),_("p",[i._v("它由芭芭拉·利斯科夫（Barbara Liskov）在1987年在一次会议上名为“数据的抽象与层次”的演说中首先提出。所以被命名为Liskov Substitution principle。")]),i._v(" "),_("p",[i._v("所谓的里氏替换，本质上具体能代替抽象，儿子拥有父亲的所有能力(父亲的钱儿子能花)。")]),i._v(" "),_("p",[i._v("举个例子，一个工厂招工，那这时候男工、女工都可以参与；如果一个工厂招女工，那这时候男工就不能参与，而女工就可以参与；如果一个工厂招青年女工，那这时候年龄大的女工不可参与等等。")]),i._v(" "),_("p",[i._v("那为什么要这样设计呢？这就涉及到计算机软件需要遵守的另一个特性：健壮性！在实际项目中,每个子类对应不同的业务含义,使用父类作为参数,传递不同的子类从而完成不同的业务逻辑。")]),i._v(" "),_("h4",{attrs:{id:"接口隔离原则（interface-segregation-principles，isp）"}},[i._v("接口隔离原则（Interface-segregation principles，ISP）")]),i._v(" "),_("p",[i._v("接口隔离原则（ISP）的目的是系统解开耦合，从而容易重构，更改和重新部署。")])])])])}),[],!1,null,null,null);v.default=p.exports}}]);