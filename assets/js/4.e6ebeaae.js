(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{416:function(t,s,a){t.exports=a.p+"assets/img/image-20211221224607269.e086ce7f.png"},417:function(t,s,a){t.exports=a.p+"assets/img/image-20211221222852580.68ef4a71.png"},418:function(t,s,a){t.exports=a.p+"assets/img/5882b2b7d0a20cf4f35e6bd379094b36adaf99f4.7fa39e71.jpeg"},419:function(t,s,a){t.exports=a.p+"assets/img/image-20211221224014795.707cd260.png"},420:function(t,s,a){t.exports=a.p+"assets/img/image-20211221224214555.0e846984.png"},421:function(t,s,a){t.exports=a.p+"assets/img/image-20211221224053047.d7e78780.png"},422:function(t,s,a){t.exports=a.p+"assets/img/image-20211221224759084.31129a9c.png"},423:function(t,s,a){t.exports=a.p+"assets/img/image-20211221225033492.46e179b7.png"},424:function(t,s,a){t.exports=a.p+"assets/img/image-20211221230902620.651e2cba.png"},425:function(t,s,a){t.exports=a.p+"assets/img/image-20211221225235690.3243e371.png"},426:function(t,s,a){t.exports=a.p+"assets/img/image-20211221225520444.8017e993.png"},427:function(t,s,a){t.exports=a.p+"assets/img/image-20211221225919892.6c76158a.png"},428:function(t,s,a){t.exports=a.p+"assets/img/image-20211221230308400.ce5f1f97.png"},566:function(t,s,a){"use strict";a.r(s);var _=a(11),v=Object(_.a)({},(function(){var t=this,s=t.$createElement,_=t._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"用图形去表达"}},[t._v("用图形去表达")]),t._v(" "),_("h2",{attrs:{id:"uml"}},[t._v("UML")]),t._v(" "),_("p",[t._v("1997年，OMG 组织（Object Management Group对象管理组织）发布了"),_("strong",[t._v("统一建模语言")]),t._v("（"),_("strong",[t._v("U")]),t._v("nified "),_("strong",[t._v("M")]),t._v("odeling "),_("strong",[t._v("L")]),t._v("anguage，UML）。UML 是一种编制软件蓝图的标准化语言，它的目标之一就是为开发团队提供标准通用的设计语言来开发和构建计算机应用。通过使用UML，这些人员能够阅读和交流系统架构和设计规划。UML支持面向对象的技术，能够准确的方便地表达面向对象的概念，体现面向对象的分析和设计风格.")]),t._v(" "),_("p",[t._v("UML的模型主要有三部分构成：")]),t._v(" "),_("ul",[_("li",[t._v("事物(Things)：UML模型中最基本的构成元素，是具有代表性的成分的抽象")]),t._v(" "),_("li",[t._v("关系(Relationships)：关系把事物紧密联系在一起")]),t._v(" "),_("li",[t._v("图(Diagrams )：图是事物和关系的可视化表示")])]),t._v(" "),_("h3",{attrs:{id:"_1-流程图"}},[t._v("1.流程图")]),t._v(" "),_("p",[t._v("流程图用于描述系统的活动, 判定点和分支等。")]),t._v(" "),_("p",[_("strong",[t._v("动作状态")]),t._v(": 原子的, 不可中断的动作, 并在此动作完成之后向另一个动作转变。在 UML 中动作状态用圆角矩形 表示, 动作状态所表示的动作写在圆角矩形内部。")]),t._v(" "),_("p",[_("strong",[t._v("分支与合并")]),t._v(":  一般用于表示对象类所具有的条件行为。")]),t._v(" "),_("p",[t._v("用一个布尔型表达式的真假来判定动作的流向. 条件行为用分支和合并表达.在活动图中, 分支用空心小菱形 表示。\n分支包括一个入转换和两个带条件的出转换, 出转换的条件应该是互斥的, 须保证只有一条出转换能够被触发。\n合并包含两个带条件的入转换和一个出转换。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(416),alt:"image-20211221224607269"}})]),t._v(" "),_("h3",{attrs:{id:"_2-时序图"}},[t._v("2.时序图")]),t._v(" "),_("p",[t._v("时序图是用来显示参与者如何以一系列顺序的步骤与系统的对象交互的模型。顺序图可以用来展示对象之间是如何进行交互的。顺序图将显示的重点放在消息序列上，即强调消息是如何在对象之间被发送和接收的。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(417),alt:"image-20211221222852580"}})]),t._v(" "),_("h3",{attrs:{id:"_3-类图"}},[t._v("3.类图")]),t._v(" "),_("p",[t._v("类图是描述系统中的类，以及各个类之间的关系的静态视图。能够让我们在正确编写代码以前对系统有一个全面的认识。类图是一种模型类型，确切地说，是一种静态模型类型。类图表示类、接口和它们之间的协作关系。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(418),alt:"5882b2b7d0a20cf4f35e6bd379094b36adaf99f4"}})]),t._v(" "),_("h3",{attrs:{id:"_4-泳道图"}},[t._v("4.泳道图")]),t._v(" "),_("p",[t._v("泳道图按角色划分为一个个泳道，每个角色的活动散落在各个角色对应的泳道里。泳道图是将模型中的活动按照职责组织起来。这种分配可以通过将活动组织成用线分开的不同区域来表示。由于它们的外观的缘故，这些区域被称作泳道。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(419),alt:"image-20211221224014795"}})]),t._v(" "),_("h3",{attrs:{id:"_5-状态图"}},[t._v("5.状态图")]),t._v(" "),_("p",[t._v("通过建立对象的生存周期模型来描述对象随时间变化的动态行为。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(420),alt:"image-20211221224214555"}})]),t._v(" "),_("h3",{attrs:{id:"_6-用例图"}},[t._v("6.用例图")]),t._v(" "),_("p",[t._v("用例图捕捉了模拟系统中的动态行为，并且描述了用户、需求以及系统功能单元之间的关系。用例图由主角，用例和它们之间的关系组成。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(421),alt:"image-20211221224053047"}})]),t._v(" "),_("h3",{attrs:{id:"_7-部署图"}},[t._v("7.部署图")]),t._v(" "),_("p",[t._v("部署图由节点以及节点之间的关系组成。描述的是系统运行时的结构，展示了硬件的配置及其软件如何部署到网络结构中。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(422),alt:"image-20211221224759084"}})]),t._v(" "),_("h3",{attrs:{id:"_8-组件图"}},[t._v("8.组件图")]),t._v(" "),_("p",[t._v("组件图（Component Diagram）又称为构件图，他描述的是在软件系统中遵从并实现一组接口的物理的、可替换的软件模块。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(423),alt:"image-20211221225033492"}})]),t._v(" "),_("h3",{attrs:{id:"_9-er图"}},[t._v("9.ER图")]),t._v(" "),_("p",[t._v("E-R图也称实体-联系图(Entity Relationship Diagram)，提供了表示实体类型、属性和联系的方法，用来描述现实世界的概念模型。它是描述现实世界关系概念模型的有效方法。是表示概念关系模型的一种方式。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(424),alt:"image-20211221230902620"}})]),t._v(" "),_("h2",{attrs:{id:"项目管理"}},[t._v("项目管理")]),t._v(" "),_("h3",{attrs:{id:"_1-甘特图"}},[t._v("1.甘特图")]),t._v(" "),_("p",[t._v("甘特图（Gantt chart）又称为横道图、条状图(Bar chart)。其通过条状图来显示项目、进度和其他时间相关的系统进展的内在关系随着时间进展的情况。")]),t._v(" "),_("p",[t._v("甘特图以图示通过活动列表和时间刻度表示出特定项目的顺序与持续时间。一条线条图，横轴表示时间，纵轴表示项目，线条表示期间计划和实际完成情况。直观表明计划何时进行，进展与要求的对比。便于管理者弄清项目的剩余任务，评估工作进度。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(425),alt:"image-20211221225235690"}})]),t._v(" "),_("h3",{attrs:{id:"_2-燃尽图"}},[t._v("2.燃尽图")]),t._v(" "),_("p",[t._v("燃尽图（Burndown Chart）是以图表展示随着时间的减少工作量的剩余情况。工作量一般以竖轴展示，时间一般以横轴展示。燃尽图对于预测何时完成工作很有用，经常被用于敏捷软件开发中，如Scrum。燃尽图也可以用于任何可测量的进度随着时间变化的项目。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(426),alt:"image-20211221225520444"}})]),t._v(" "),_("h2",{attrs:{id:"个人思考"}},[t._v("个人思考")]),t._v(" "),_("h3",{attrs:{id:"_1-脑图"}},[t._v("1.脑图")]),t._v(" "),_("p",[t._v("脑图又称思维导图、心智图、心智地图、灵感触发图、思维地图，在这些名称中，以“思维导图”相称的版本较为普遍，它是一种用来表达思考方式的图像式思维辅助工具。脑图使用一个中心关键词就可以引起形象化的构造和分类想法，以“辐射线”的形式延伸（代表字词、任务、想法或其它关联项目的内容），能够很好地展现出制作者的想法及思考方式。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(427),alt:"image-20211221225919892"}})]),t._v(" "),_("h2",{attrs:{id:"_2-鱼骨图"}},[t._v("2.鱼骨图")]),t._v(" "),_("p",[t._v("鱼骨图（又名因果图、石川图），指的是一种发现问题“根本原因”的分析方法，现代工商管理教育将其划分为问题型、原因型及对策型鱼骨图等几类。")]),t._v(" "),_("p",[t._v("问题的特性总是受到一些因素的影响，我们通过头脑风暴法找出这些因素，并将它们与特性值一起，按相互关联性整理而成的层次分明、条理清楚，并标出重要因素的图形就叫特性要因图、特性原因图。因其形状如鱼骨，所以又叫鱼骨图。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(428),alt:"image-20211221230308400"}})])])}),[],!1,null,null,null);s.default=v.exports}}]);